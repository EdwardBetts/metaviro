NBCONTIGS = 100000
TOPLEVEL = ["virusfiltered", "virus", "arch", "bact", "euk"]

BIN = "../../../bin"

"""

"""

rule all:
	input: expand("{reign}_cont_k{k}.mv", reign=TOPLEVEL, k=range(3,8))
	shell: "ls -lh *.mv"

rule computedist:
	input: "{reign}_cont.fasta"
	output: "{reign}_cont_k{k}.mv"
	shell:
		"""
		{BIN}/run_kmer.bash  -k {wildcards.k} -f {input}
		python {BIN}/convert_kmer.py -t 10 {wildcards.reign}_cont_k{wildcards.k}.frags
		rm {wildcards.reign}_cont_k{wildcards.k}.frags
		"""

# Separate viral sequences that have no hits from the rest
rule separate:
	input: "virus_cont.fasta", "all.hits"
	output: "virusfiltered_cont.fasta"
	shell: "module load python/2.7.3 && python ../separate.py {input} > {output}"

# Gather hits in a single file
rule concatenate_hits:
	input: expand("{reign}.hits", reign=TOPLEVEL[2:])
	output: "all.hits"
	shell: "cat {input} > {output}"

"""
# Get the query sequences ids that don't have hits on the db
rule getnohits:
	input: "{reign}_cont.fasta.blastout"
	output: "{reign}.nohits"
	shell: "module load python/2.7.3 && python ../filter_nohits.py {input} > {output}"
"""

# Get the query sequences ids that have hits on the db
rule gethits:
	input: "{reign}_cont.fasta.blastout"
	output: "{reign}.hits"
	shell: "module load python/2.7.3 && python ../filter_hits.py {input} > {output}"

# Blast the viral contigs to the other reigns
rule blast:
	input: expand("{reign}_cont.fasta", reign=TOPLEVEL[1:])
	output: expand("{reign}_cont.fasta.blastout", reign=TOPLEVEL[2:])
	shell: "../filter_contigs.sh {input}"

# Make a new resampling in the current directory
rule resample:
	input: "/home/lschmitt/ncbi/{reign}/{reign}.fasta"
	output: "{reign}_cont.fasta"
	shell: "python {BIN}/generate_fake_contigs.py -n {NBCONTIGS} -r -o {output} {input}"


